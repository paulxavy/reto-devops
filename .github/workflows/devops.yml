name: DevOps CI/CD pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: devops-reto-1
  CLUSTER_NAME: devops-cluster
  REGION: us-central1
  IMAGE_NAME: devops
  REGISTRY: ghcr.io/${{ github.actor }}

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Verificar código
        uses: actions/checkout@v4

      - name: Configuración de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instalar dependencias
        run: |
          pip install -r requirements.txt
          pip install pytest flake8 bandit

      - name: Análisis de código estático
        run: |
          flake8 app tests || true
          bandit -r app -ll || true

      - name: Ejecutar pruebas
        run: pytest -v --maxfail=1 --disable-warnings || true

      - name: Logearse a GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build y Push de Docker (latest)
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:latest .
          docker push $REGISTRY/$IMAGE_NAME:latest

  deploy:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Autenticación a Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configuración de Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Instalar GKE auth plugin
        run: gcloud components install gke-gcloud-auth-plugin --quiet

      - name: Configuración de kubectl
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME --region $REGION --project $PROJECT_ID

      - name: Desplegar a GKE (imagen latest)
        run: |
          echo "Actualizacion de imagen a $REGISTRY/$IMAGE_NAME:latest"
          kubectl set image deployment/devops-api devops-api=$REGISTRY/$IMAGE_NAME:latest
          kubectl rollout status deployment/devops-api --timeout=300s
